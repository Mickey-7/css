.parent{
    border: 2px solid #000;
    padding: 20px;
}

.child{
    border: 1px dotted #000 ;
    padding: 20px;
    
    /* invoking the position */
    position: relative;

    /* invoking animation */
    animation: push ease 5s alternate infinite;
    animation-delay: 1.5s;
}

/* create keyframes animation */
@keyframes push {
    0%{
        left: 0;
        top: 0;
    }
    50% {
        left: -100px;
        top: 100px;
    }
    100% {
        top: 50px;
        left: 50px;
    }
}

/* Relative to its original position the element above will now 
be nudged down from the top by 20px. If we were to animate these 
properties we can see just how much control this gives us 
(although this isn’t a good idea for performance reasons): */

/* --------------------------------------------------------------------------------------------------- */

/* If a child element has an absolute value then the parent 
element will behave as if the child isn’t there at all: */

.parent1{
    border: 2px solid #000;
    padding: 20px;
}

.child1{
    border: 1px dotted #000 ;
    padding: 20px;
    
    /* invoking the position */
    position: absolute;

    /* And when we try to set other values such as left, bottom, 
    and right we’ll find that the child element is responding 
    not to the dimensions of its parent, but the document: */
    left: 0;
    right: 0;
    top: 100%;
    /* the 100% is from the web page top 
    if position on parent below is commented out */
    /* otherwise, it is 100% after the parent div */
}

/* To make the child element positioned absolutely from its 
parent element we need to set this on the parent element itself: */
.parent1{
    border: 2px solid #000;
    padding: 20px;

    /* mkaing parent relative */
    position: relative; 

}

/* Now properties such as left, right, bottom and top will refer 
to the parent element, so that if we make the child element 
transparent we can see it sitting right at the bottom of the parent: */

/* --------------------------------------------------------------------------------------------------- */

/* Fixed */
/* The fixed value is similar to absolute as it can 
help you position an element anywhere relative to the document, 
however this value is unaffected by scrolling. 
See the child element in the demo below and how, once you scroll, 
it continues to stick to the bottom of the page: */

.parent2{
    border: 2px solid #000;
    padding: 20px;

    position: relative;
}

.child2{
    border: 1px dotted #000;
    padding: 20px;

    position: fixed;
    left: 0;
    right: 0;
    bottom: 0;
}

/* --------------------------------------------------------------------------------------------------- */

/* make nav occupy th e whole width */
nav{
    background: hotpink;
}

ul{
    /* removpe the dot on ul */
    list-style-type: none;
    /* center text */
    text-align: center;
}

li{
    /* make li next to each other then add some padding */
    float: left;
    /* we need to set 0px to right/left */
    /* to give wway to the width property below which is 33%  */
    padding: 10px 0px 10px;
    background: hotpink;
    width: 33%;
}

header ,article{
    display: block;
    /* center text */
    text-align: center;
}

/* for the sticky header */
.sticky{
    position: sticky; top: 0px;
}












